# Node.js API Template

Este template cria uma API RESTful robusta com Node.js, Express, Prisma e PostgreSQL.

## Estrutura do Template

```
.
├── package.json
├── tsconfig.json
├── .env.example
├── .env
├── prisma/
│   ├── schema.prisma
│   └── migrations/
├── src/
│   ├── index.ts
│   ├── app.ts
│   ├── server.ts
│   ├── config/
│   │   ├── database.ts
│   │   └── express.ts
│   ├── controllers/
│   │   ├── user.controller.ts
│   │   └── auth.controller.ts
│   ├── middleware/
│   │   ├── auth.ts
│   │   └── validation.ts
│   ├── routes/
│   │   ├── api.ts
│   │   ├── auth.ts
│   │   └── users.ts
│   ├── services/
│   │   ├── user.service.ts
│   │   └── auth.service.ts
│   ├── types/
│   │   ├── express.d.ts
│   │   └── index.ts
│   └── utils/
│       ├── logger.ts
│       └── errorHandler.ts
├── tests/
│   ├── unit/
│   └── integration/
└── docker-compose.yml
```

## Instalação

```bash
# Copiar template
cp -r .killo-workspace/templates/node-api minha-api

# Entrar no diretório
cd minha-api

# Instalar dependências
npm install

# Configurar variáveis de ambiente
cp .env.example .env
# Editar .env com suas configurações

# Iniciar banco de dados (opcional)
docker-compose up -d

# Rodar migrações do Prisma
npx prisma migrate dev

# Iniciar servidor
npm run dev
```

## Recursos

- 🔐 **Autenticação JWT**: Sistema de autenticação seguro
- 🗄️ **ORM Prisma**: Type-safe database access
- 📊 **Validação**: Zod para validação de dados
- 🧪 **Testes**: Estrutura para testes unitários e de integração
- 🐳 **Docker**: Configuração pronta para containerização
- 📝 **Logging**: Sistema de logging estruturado
- 🛡️ **Segurança**: Middlewares de segurança e tratamento de erros

## Comandos Disponíveis

- `npm run dev` - Inicia o servidor em modo desenvolvimento
- `npm run build` - Compila o projeto para produção
- `npm start` - Inicia o servidor em modo produção
- `npm run test` - Executa os testes
- `npm run lint` - Executa o linter
- `npx prisma studio` - Abre o Prisma Studio
- `npx prisma migrate dev` - Cria nova migração
- `npx prisma generate` - Gera os tipos do Prisma

## Endpoints

### Autenticação
- `POST /api/auth/register` - Registrar novo usuário
- `POST /api/auth/login` - Fazer login
- `POST /api/auth/logout` - Fazer logout
- `GET /api/auth/me` - Obter usuário logado

### Usuários
- `GET /api/users` - Listar todos os usuários
- `GET /api/users/:id` - Obter usuário por ID
- `PUT /api/users/:id` - Atualizar usuário
- `DELETE /api/users/:id` - Deletar usuário

## Customização

### Adicionar Novos Modelos
1. Edite `prisma/schema.prisma`
2. Rode `npx prisma migrate dev`
3. Atualize os tipos em `src/types/index.ts`

### Criar Novos Controllers
1. Crie um novo arquivo em `src/controllers/`
2. Adicione as rotas em `src/routes/`
3. Atualize `src/app.ts` para registrar as novas rotas

## Integração com Kilo

Este template está otimizado para integração com o sistema Kilo:

1. **Busca Semântica**: Configure a indexação automática dos endpoints
2. **Agente IA**: Use o agente para gerar novas funcionalidades
3. **Deploy**: Pronto para deploy em qualquer plataforma Node.js