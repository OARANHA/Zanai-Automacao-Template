# Universal Starter Template

Este template Ã© uma base minimalista e flexÃ­vel para qualquer tipo de projeto web, com configuraÃ§Ãµes bÃ¡sicas mas completas.

## Estrutura do Template

```
.
â”œâ”€â”€ package.json
â”œâ”€â”€ tsconfig.json
â”œâ”€â”€ .env.example
â”œâ”€â”€ .env
â”œâ”€â”€ .gitignore
â”œâ”€â”€ README.md
â”œâ”€â”€ public/
â”‚   â”œâ”€â”€ favicon.ico
â”‚   â””â”€â”€ robots.txt
â””â”€â”€ src/
    â”œâ”€â”€ index.ts
    â”œâ”€â”€ App.tsx
    â”œâ”€â”€ index.css
    â”œâ”€â”€ assets/
    â”‚   â””â”€â”€ images/
    â”œâ”€â”€ components/
    â”‚   â”œâ”€â”€ Layout/
    â”‚   â”‚   â”œâ”€â”€ Header.tsx
    â”‚   â”‚   â”œâ”€â”€ Footer.tsx
    â”‚   â”‚   â””â”€â”€ Navigation.tsx
    â”‚   â””â”€â”€ Common/
    â”‚       â”œâ”€â”€ Button.tsx
    â”‚       â”œâ”€â”€ Input.tsx
    â”‚       â”œâ”€â”€ Card.tsx
    â”‚       â””â”€â”€ Modal.tsx
    â”œâ”€â”€ hooks/
    â”‚   â”œâ”€â”€ useLocalStorage.ts
    â”‚   â”œâ”€â”€ useDebounce.ts
    â”‚   â””â”€â”€ useApi.ts
    â”œâ”€â”€ pages/
    â”‚   â”œâ”€â”€ Home.tsx
    â”‚   â”œâ”€â”€ About.tsx
    â”‚   â””â”€â”€ Contact.tsx
    â”œâ”€â”€ services/
    â”‚   â”œâ”€â”€ api.ts
    â”‚   â””â”€â”€ config.ts
    â”œâ”€â”€ store/
    â”‚   â”œâ”€â”€ index.ts
    â”‚   â””â”€â”€ slices/
    â”‚       â””â”€â”€ appSlice.ts
    â”œâ”€â”€ styles/
    â”‚   â”œâ”€â”€ globals.css
    â”‚   â”œâ”€â”€ variables.css
    â”‚   â””â”€â”€ components.css
    â”œâ”€â”€ types/
    â”‚   â””â”€â”€ index.ts
    â””â”€â”€ utils/
        â”œâ”€â”€ helpers.ts
        â”œâ”€â”€ constants.ts
        â””â”€â”€ validators.ts
```

## InstalaÃ§Ã£o

```bash
# Copiar template
cp -r .killo-workspace/templates/universal-starter meu-projeto

# Entrar no diretÃ³rio
cd meu-projeto

# Instalar dependÃªncias
npm install

# Iniciar desenvolvimento
npm run dev
```

## Recursos

- ðŸš€ **Minimalista**: Sem frameworks pesados ou opiniÃµes forÃ§adas
- ðŸ”§ **FlexÃ­vel**: Configure conforme suas necessidades
- ðŸ“¦ **Pronto para Uso**: ConfiguraÃ§Ãµes bÃ¡sicas jÃ¡ implementadas
- ðŸŽ¨ **CSS Modules**: EstilizaÃ§Ã£o modular e organizada
- ðŸ”„ **React Router**: NavegaÃ§Ã£o declarativa
- ðŸ§ª **Testes**: ConfiguraÃ§Ã£o bÃ¡sica para testes
- ðŸ“± **Responsivo**: Design adaptÃ¡vel
- ðŸŽ¯ **TypeScript**: Suporte completo para TypeScript

## Comandos DisponÃ­veis

- `npm run dev` - Inicia o servidor de desenvolvimento
- `npm run build` - ConstrÃ³i o projeto para produÃ§Ã£o
- `npm run start` - Inicia o servidor de produÃ§Ã£o
- `npm run test` - Executa os testes
- `npm run lint` - Executa o linter
- `npm run type-check` - Verifica tipos do TypeScript

## Estrutura de Pastas

### `src/components/`
- **Layout**: Componentes de layout (Header, Footer, Navigation)
- **Common**: Componentes reutilizÃ¡veis (Button, Input, Card, Modal)

### `src/hooks/`
- Custom hooks para funcionalidades comuns
- `useLocalStorage`: Gerenciamento de estado no localStorage
- `useDebounce`: Debounce de valores
- `useApi`: Hook para chamadas de API

### `src/pages/`
- PÃ¡ginas principais do aplicativo
- Cada pÃ¡gina Ã© um componente funcional

### `src/services/`
- ServiÃ§os de API e configuraÃ§Ãµes
- `api.ts`: ConfiguraÃ§Ã£o do axios/axios
- `config.ts`: ConfiguraÃ§Ãµes gerais

### `src/styles/`
- Estilos organizados por mÃ³dulos
- `globals.css`: Estilos globais
- `variables.css`: VariÃ¡veis CSS (cores, fontes, etc.)
- `components.css`: Estilos especÃ­ficos de componentes

### `src/utils/`
- FunÃ§Ãµes utilitÃ¡rias
- `helpers.ts`: FunÃ§Ãµes auxiliares
- `constants.ts`: Constantes do aplicativo
- `validators.ts`: FunÃ§Ãµes de validaÃ§Ã£o

## CustomizaÃ§Ã£o

### Adicionar Novas PÃ¡ginas
1. Crie um novo componente em `src/pages/`
2. Adicione a rota em `src/App.tsx`
3. Atualize o menu de navegaÃ§Ã£o em `src/components/Layout/Navigation.tsx`

### Modificar o Tema
Edite `src/styles/variables.css` para alterar cores, fontes e outras variÃ¡veis de design.

### Adicionar Novos ServiÃ§os
1. Crie um novo arquivo em `src/services/`
2. Adicione as configuraÃ§Ãµes necessÃ¡rias
3. Importe e use nos componentes

### Expandir o Estado
1. Crie novos slices em `src/store/slices/`
2. Atualize `src/store/index.ts` para registrar os reducers
3. Use os hooks `useDispatch` e `useSelector` nos componentes

## IntegraÃ§Ã£o com Kilo

Este template estÃ¡ otimizado para integraÃ§Ã£o com o sistema Kilo:

1. **Busca SemÃ¢ntica**: Configure a indexaÃ§Ã£o automÃ¡tica dos componentes
2. **Agente IA**: Use o agente para gerar novas funcionalidades
3. **Deploy**: Pronto para deploy em qualquer plataforma estÃ¡tica

## Dicas de Uso

### Para Projetos React
- Instale `react-router-dom` para roteamento
- Adicione `react-query` ou `swr` para gerenciamento de estado de servidor
- Considere `zustand` ou `recoil` para gerenciamento de estado global

### Para Projetos Next.js
- Remova `src/index.ts` e `src/App.tsx`
- Crie `src/pages/_app.tsx` e `src/pages/index.tsx`
- Instale e configure `next` e `react`

### Para Projetos Vue
- Substitua os arquivos React por arquivos Vue
- Instale `vue-router` para roteamento
- Use `vuex` ou `pinia` para gerenciamento de estado

### Para Projetos Angular
- Substitua a estrutura React por Angular
- Configure `@angular/router` para roteamento
- Use `@ngrx/store` ou `NgRx` para gerenciamento de estado