#!/usr/bin/env bash
set -euo pipefail

# =============================================
# Kilo Code - Script de Busca Seguro
# =============================================

# Fun√ß√£o de valida√ß√£o segura
validate_var() {
    local var_name="$1"
    local var_value="$2"
    local pattern="$3"
    
    if [[ -z "$var_value" ]]; then
        echo "‚ùå Erro: $var_name n√£o est√° definida"
        exit 1
    fi
    
    if [[ -n "$pattern" ]] && [[ ! "$var_value" =~ $pattern ]]; then
        echo "‚ùå Erro: $var_name cont√©m caracteres inv√°lidos"
        exit 1
    fi
}

# Fun√ß√£o para sanitizar entrada
sanitize_input() {
    local input="$1"
    # Remove caracteres perigosos e limita tamanho
    echo "$input" | sed -e 's/[;&|<>`$()]//g' -e 's/\.\.\///g' | head -c 1000
}

# Carrega vari√°veis de ambiente de forma segura
if [ -f ".env" ]; then
    while IFS='=' read -r key value; do
        # Ignora coment√°rios e linhas vazias
        [[ $key =~ ^[[:space:]]*# ]] && continue
        [[ -z $key ]] && continue
        
        # Remove espa√ßos e aspas
        key=$(echo "$key" | tr -d ' "')
        value=$(echo "$value" | tr -d '"')
        
        # Valida e exporta apenas vari√°veis permitidas
        case "$key" in
            QDRANT_URL|OLLAMA_URL|EMBED_MODEL|QDRANT_COLLECTION|SEARCH_LIMIT|WITH_SNIPPET)
                validate_var "$key" "$value"
                export "$key=$value"
                ;;
        esac
    done < .env
fi

# Configura√ß√µes com valida√ß√£o
export EMBED_MODEL="${EMBED_MODEL:-all-minilm}"
export SEARCH_LIMIT="${SEARCH_LIMIT:-8}"
export WITH_SNIPPET="${WITH_SNIPPET:-1}"

# Valida√ß√£o cr√≠tica da collection
validate_var "QDRANT_COLLECTION" "$QDRANT_COLLECTION" '^[a-zA-Z0-9_-]+$'

# Valida√ß√£o do limite de busca
if ! [[ "$SEARCH_LIMIT" =~ ^[0-9]+$ ]] || [ "$SEARCH_LIMIT" -lt 1 ] || [ "$SEARCH_LIMIT" -gt 50 ]; then
    echo "‚ùå Erro: SEARCH_LIMIT deve ser um n√∫mero entre 1 e 50"
    exit 1
fi

# Valida√ß√£o dos argumentos
if [ $# -eq 0 ]; then
    echo "‚ùå Erro: Query de busca n√£o fornecida"
    echo "Uso: $0 \"sua query\" [--limit N] [--file filtro] [--json] [--no-snippet]"
    exit 1
fi

# Extrai e sanitiza a query
QUERY="$1"
QUERY_SANITIZED=$(sanitize_input "$QUERY")

if [ -z "$QUERY_SANITIZED" ]; then
    echo "‚ùå Erro: Query inv√°lida ap√≥s sanitiza√ß√£o"
    exit 1
fi

# Processa argumentos adicionais de forma segura
shift
LIMIT="$SEARCH_LIMIT"
FILE_FILTER=""
JSON_OUTPUT=false
WITH_SNIPPET_FLAG="$WITH_SNIPPET"

while [[ $# -gt 0 ]]; do
    case $1 in
        --limit)
            if [[ -n "${2:-}" ]] && [[ "$2" =~ ^[0-9]+$ ]]; then
                LIMIT="$2"
                shift
            else
                echo "‚ùå Erro: --limit requer um n√∫mero v√°lido"
                exit 1
            fi
            ;;
        --file)
            if [[ -n "${2:-}" ]]; then
                FILE_FILTER=$(sanitize_input "$2")
                shift
            else
                echo "‚ùå Erro: --file requer um valor"
                exit 1
            fi
            ;;
        --json)
            JSON_OUTPUT=true
            ;;
        --no-snippet)
            WITH_SNIPPET_FLAG="0"
            ;;
        *)
            echo "‚ùå Erro: Argumento desconhecido: $1"
            exit 1
            ;;
    esac
    shift
done

# Valida√ß√£o final do limite
if ! [[ "$LIMIT" =~ ^[0-9]+$ ]] || [ "$LIMIT" -lt 1 ] || [ "$LIMIT" -gt 50 ]; then
    echo "‚ùå Erro: Limite inv√°lido: $LIMIT"
    exit 1
fi

# Log seguro (sem expor a query completa)
echo "üîé Iniciando busca segura..."
echo "üî¢ Collection: $QDRANT_COLLECTION"
echo "‚öôÔ∏è  Modelo: $EMBED_MODEL"
echo "üìä Limite: $LIMIT"

# Constr√≥i comando de forma segura
CMD_ARGS=("$QUERY_SANITIZED" "--limit" "$LIMIT")

if [[ -n "$FILE_FILTER" ]]; then
    CMD_ARGS+=("--file" "$FILE_FILTER")
fi

if [[ "$JSON_OUTPUT" == true ]]; then
    CMD_ARGS+=("--json")
fi

if [[ "$WITH_SNIPPET_FLAG" == "0" ]]; then
    CMD_ARGS+=("--no-snippet")
fi

# Executa o m√≥dulo Node.js com timeout e tratamento de erro
if command -v node >/dev/null 2>&1; then
    timeout 60 node scripts/search_repo.mjs "${CMD_ARGS[@]}" || {
        echo "‚ùå Erro: Falha na busca ou timeout excedido"
        exit 1
    }
else
    echo "‚ùå Erro: Node.js n√£o encontrado"
    exit 1
fi

echo "‚úÖ Busca conclu√≠da com seguran√ßa"